{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/suphachabharnigrodhananda/Desktop/6080/ass3/frontend/src/pages/play.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport Cookies from 'universal-cookie';\nimport { Redirect } from 'react-router-dom';\n\nfunction Play({\n  changeAlert\n}) {\n  _s();\n\n  const cookies = new Cookies();\n  const [redirect, setRedirect] = React.useState('');\n  const [started, setStarted] = React.useState(false);\n  const [question, setQuestion] = React.useState('');\n  const [point, setPoint] = React.useState(0);\n  const [src, setSrc] = React.useState('');\n  const [choices, setChoices] = React.useState([]);\n  const [multiple, setMultiple] = React.useState(false);\n  const [answersSelected, selectAnswer] = React.useState([]); // const [playing, setPlaying] = React.useState(false);\n\n  const getQuestion = () => {\n    fetch('http://localhost:5005/play/' + cookies.get('player') + '/question', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(data => {\n      if (data.status === 200) {\n        data.json().then(result => {\n          setQuestion(result.question.description);\n          setPoint(result.question.point);\n          setSrc(result.question.src);\n          setChoices(result.question.choices);\n          setMultiple(result.question.multiple);\n        });\n      } else {\n        changeAlert('warning', 'Please join a session to play.');\n        setRedirect('/join');\n      }\n    });\n  };\n\n  const checkStatus = () => {\n    fetch('http://localhost:5005/play/' + cookies.get('player') + '/status', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(data => {\n      if (data.status === 200) {\n        data.json().then(result => {\n          setStarted(result.started);\n\n          if (result.started) {\n            getQuestion();\n          }\n        });\n      } else {\n        changeAlert('warning', 'Please join a session to play.');\n        setRedirect('/join');\n      }\n    });\n  };\n\n  React.useEffect(() => {\n    if (cookies.get('player')) {\n      setInterval(() => {\n        checkStatus();\n      }, 1000);\n    } else {\n      changeAlert('warning', 'Please join a session to play.');\n      setRedirect('/join');\n    }\n  }, []);\n  let display = null;\n\n  if (src.startsWith('http')) {\n    display = /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: src\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }, this);\n  } else if (src !== '') {\n    display = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: src\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }, this);\n  }\n\n  let answers = [];\n  React.useEffect(() => {\n    console.log(answersSelected);\n  }, [answersSelected]);\n\n  if (src !== '') {\n    const answerClicked = id => {\n      const i = answersSelected.indexOf(id);\n\n      if (i > -1) {\n        const newAnswers = answersSelected.slice();\n        newAnswers.splice(i, 1);\n        selectAnswer(newAnswers);\n      } else if (multiple) {\n        const newAnswers = answersSelected.slice();\n        newAnswers.push(id);\n        selectAnswer(newAnswers);\n      } else {\n        selectAnswer([id]);\n      }\n    };\n\n    answers = choices.map(choice => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        onClick: () => answerClicked(choice.id),\n        children: choice.choice\n      }, choice.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  let numberOfAnswers = null;\n\n  if (multiple) {\n    numberOfAnswers = '(You can choose more than one answer.)';\n  } else {\n    numberOfAnswers = '(You can choose one answer only.)';\n  }\n\n  if (redirect !== '') {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      push: true,\n      to: redirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  } else if (!started) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The game has not started yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please wait for admin to start the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"firstsection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: question + ' (' + point + (point === 1 ? ' point' : ' points') + ')'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), display, /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group\",\n          children: answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), numberOfAnswers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(Play, \"1pYDrLGbZNDa+m+HJANtn/SdaDM=\");\n\n_c = Play;\nPlay.propTypes = {\n  changeAlert: propTypes.func\n};\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/Users/suphachabharnigrodhananda/Desktop/6080/ass3/frontend/src/pages/play.jsx"],"names":["React","propTypes","Cookies","Redirect","Play","changeAlert","cookies","redirect","setRedirect","useState","started","setStarted","question","setQuestion","point","setPoint","src","setSrc","choices","setChoices","multiple","setMultiple","answersSelected","selectAnswer","getQuestion","fetch","get","method","headers","Accept","then","data","status","json","result","description","checkStatus","useEffect","setInterval","display","startsWith","answers","console","log","answerClicked","id","i","indexOf","newAnswers","slice","splice","push","map","choice","numberOfAnswers","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport Cookies from 'universal-cookie';\nimport {\n  Redirect\n} from 'react-router-dom';\n\nfunction Play ({ changeAlert }) {\n  const cookies = new Cookies();\n  const [redirect, setRedirect] = React.useState('');\n  const [started, setStarted] = React.useState(false);\n  const [question, setQuestion] = React.useState('');\n  const [point, setPoint] = React.useState(0);\n  const [src, setSrc] = React.useState('');\n  const [choices, setChoices] = React.useState([]);\n  const [multiple, setMultiple] = React.useState(false);\n  const [answersSelected, selectAnswer] = React.useState([]);\n  // const [playing, setPlaying] = React.useState(false);\n\n  const getQuestion = () => {\n    fetch('http://localhost:5005/play/' + cookies.get('player') + '/question', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(data => {\n      if (data.status === 200) {\n        data.json().then((result) => {\n          setQuestion(result.question.description);\n          setPoint(result.question.point);\n          setSrc(result.question.src);\n          setChoices(result.question.choices);\n          setMultiple(result.question.multiple);\n        });\n      } else {\n        changeAlert('warning', 'Please join a session to play.');\n        setRedirect('/join');\n      }\n    });\n  };\n  const checkStatus = () => {\n    fetch('http://localhost:5005/play/' + cookies.get('player') + '/status', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(data => {\n      if (data.status === 200) {\n        data.json().then((result) => {\n          setStarted(result.started);\n          if (result.started) {\n            getQuestion();\n          }\n        });\n      } else {\n        changeAlert('warning', 'Please join a session to play.');\n        setRedirect('/join');\n      }\n    });\n  };\n\n  React.useEffect(() => {\n    if (cookies.get('player')) {\n      setInterval(() => {\n        checkStatus();\n      }, 1000);\n    } else {\n      changeAlert('warning', 'Please join a session to play.');\n      setRedirect('/join');\n    }\n  }, []);\n\n  let display = null;\n  if (src.startsWith('http')) {\n    display = <iframe src={src}></iframe>;\n  } else if (src !== '') {\n    display = <img src={src}></img>;\n  }\n\n  let answers = [];\n  React.useEffect(() => {\n    console.log(answersSelected);\n  }, [answersSelected]);\n  if (src !== '') {\n    const answerClicked = (id) => {\n      const i = answersSelected.indexOf(id);\n      if (i > -1) {\n        const newAnswers = answersSelected.slice();\n        newAnswers.splice(i, 1);\n        selectAnswer(newAnswers);\n      } else if (multiple) {\n        const newAnswers = answersSelected.slice();\n        newAnswers.push(id);\n        selectAnswer(newAnswers);\n      } else {\n        selectAnswer([id]);\n      }\n    };\n    answers = choices.map((choice) => {\n      return (\n        <li className='list-group-item' key={choice.id} onClick={() => answerClicked(choice.id)}>\n          {choice.choice}\n        </li>\n      );\n    });\n  }\n\n  let numberOfAnswers = null;\n  if (multiple) {\n    numberOfAnswers = '(You can choose more than one answer.)';\n  } else {\n    numberOfAnswers = '(You can choose one answer only.)';\n  }\n\n  if (redirect !== '') {\n    return (\n      <Redirect push to={redirect} />\n    );\n  } else if (!started) {\n    return (\n      <>\n        <h1>The game has not started yet</h1>\n        <p>Please wait for admin to start the game.</p>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div className='firstsection'>\n          <h1>{question + ' (' + point + ((point === 1) ? ' point' : ' points') + ')'}</h1>\n          {display}\n          <ul className='list-group'>\n            {answers}\n          </ul>\n          {numberOfAnswers}\n        </div>\n      </>\n    );\n  }\n}\n\nPlay.propTypes = {\n  changeAlert: propTypes.func\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}