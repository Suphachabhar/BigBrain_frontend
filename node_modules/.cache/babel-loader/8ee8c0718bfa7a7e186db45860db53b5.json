{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/suphachabharnigrodhananda/Desktop/6080/ass3/frontend/src/pages/create.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport Cookies from 'universal-cookie';\nimport { Redirect } from 'react-router-dom';\n\nfunction Create({\n  changeAlert,\n  forceLogout\n}) {\n  _s();\n\n  const cookies = new Cookies();\n  const [redirect, setRedirect] = React.useState('');\n  const [choice, setChoice] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [upload, setUpload] = React.useState(null);\n\n  const createGame = () => {\n    let valid = true;\n\n    if (choice) {\n      if (upload === null) {\n        valid = false;\n        changeAlert('danger', 'Please choose a file');\n      } else if (!upload.name) {\n        valid = false;\n        changeAlert('danger', 'The file must have \\'name\\' field');\n        console.log(typeof upload);\n      } else if (upload.questions) {\n        if (!Array.isArray(upload.questions)) {\n          valid = false;\n          changeAlert('danger', 'The \\'questions\\' field must be a list of questions');\n        } else {\n          upload.questions.forEach(q => {\n            if (!q.description || !q.time || !q.point || !q.choices || !q.answers) {\n              valid = false;\n              changeAlert('danger', 'Each question must have \\'description\\', \\'time\\', \\'point\\', \\'choices\\' and \\'answers\\'');\n            } else if (typeof q.time !== 'number' || typeof q.point !== 'number') {\n              valid = false;\n              changeAlert('danger', 'The \\'time\\' and \\'point\\' fields must be a number');\n            } else if (!Array.isArray(q.choices) || !Array.isArray(q.answers)) {\n              valid = false;\n              changeAlert('danger', 'The \\'choices\\' and \\'answers\\' fields must be a list');\n            } else if (q.choices.length < 2 || q.choices.length > 6) {\n              valid = false;\n              changeAlert('danger', 'Each question must have 2-6 choices');\n            } else {\n              const ids = [];\n              q.choices.forEach(c => {\n                if (!c.id || !c.choice) {\n                  valid = false;\n                  changeAlert('danger', 'Each choice must have \\'id\\' and \\'choice\\'');\n                } else if (c.id) {\n                  if (ids.includes(c.id)) {\n                    valid = false;\n                    changeAlert('danger', 'Each choice in a question must have a unique \\'id\\'');\n                  } else {\n                    ids.push(c.id);\n                  }\n                }\n              });\n              q.answers.forEach(a => {\n                if (!ids.includes(a)) {\n                  valid = false;\n                  changeAlert('danger', 'Each answer in a question must be the choice \\'id\\'');\n                }\n              });\n            }\n          });\n        }\n      }\n    } else if (name === '') {\n      valid = false;\n      changeAlert('danger', 'Please provide a name');\n    }\n\n    if (valid) {\n      fetch('http://localhost:5005/admin/quiz/new', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + cookies.get('token')\n        },\n        body: JSON.stringify({\n          name: choice ? upload.name : name\n        })\n      }).then(data => {\n        if (data.status === 200) {\n          if (choice) {\n            data.json().then(result => {\n              fetch('http://localhost:5005/admin/quiz/' + result.quizId, {\n                method: 'PUT',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                  Authorization: 'Bearer ' + cookies.get('token')\n                },\n                body: JSON.stringify({\n                  questions: upload.questions.map(q => {\n                    return {\n                      id: q.id,\n                      description: q.description,\n                      time: q.time,\n                      point: q.point,\n                      src: q.src ? q.src : null,\n                      choices: q.choices.map(c => {\n                        return {\n                          id: c.id,\n                          choice: c.choice\n                        };\n                      }),\n                      answers: q.answers\n                    };\n                  }),\n                  name: upload.name,\n                  thumbnail: upload.thumbnail ? upload.thumbnail : null\n                })\n              }).then(data => {\n                if (data.status === 200) {\n                  changeAlert('success', 'You have created \"' + name + '\"');\n                  setRedirect('/dashboard');\n                } else if (data.status === 403) {\n                  forceLogout();\n                  setRedirect('/login');\n                } else {\n                  data.json().then(result => {\n                    changeAlert('danger', result.error);\n                  });\n                }\n              });\n            });\n          } else {\n            changeAlert('success', 'You have created \"' + name + '\"');\n            setRedirect('/dashboard');\n          }\n        } else if (data.status === 403) {\n          forceLogout();\n          setRedirect('/login');\n        } else {\n          data.json().then(result => {\n            changeAlert('danger', result.error);\n          });\n        }\n      });\n    }\n  };\n\n  const readUpload = e => {\n    if (e.target.files[0]) {\n      const reader = new FileReader();\n      reader.readAsText(e.target.files[0], 'UTF-8');\n\n      reader.onload = e => {\n        setUpload(JSON.parse(e.target.result));\n      };\n    } else {\n      setUpload(null);\n    }\n  };\n\n  let input = null;\n\n  if (choice) {\n    input = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"application/json\",\n          onChange: readUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    input = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => {\n            setName(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  if (redirect === '') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"createGame\",\n          name: \"choice\",\n          type: \"radio\",\n          onChange: () => {\n            setChoice(false);\n          },\n          checked: !choice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"createGame\",\n          children: \"Create new game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"uploadGame\",\n          name: \"choice\",\n          type: \"radio\",\n          onChange: () => {\n            setChoice(true);\n          },\n          checked: choice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadGame\",\n          children: \"Upload game data (JSON)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), input, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: createGame,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      push: true,\n      to: redirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Create, \"s1w0Aj6I2RBaMDfa6P1Wmnej/Ms=\");\n\n_c = Create;\nCreate.propTypes = {\n  changeAlert: propTypes.func,\n  forceLogout: propTypes.func\n};\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/Users/suphachabharnigrodhananda/Desktop/6080/ass3/frontend/src/pages/create.jsx"],"names":["React","propTypes","Cookies","Redirect","Create","changeAlert","forceLogout","cookies","redirect","setRedirect","useState","choice","setChoice","name","setName","upload","setUpload","createGame","valid","console","log","questions","Array","isArray","forEach","q","description","time","point","choices","answers","length","ids","c","id","includes","push","a","fetch","method","headers","Accept","Authorization","get","body","JSON","stringify","then","data","status","json","result","quizId","map","src","thumbnail","error","readUpload","e","target","files","reader","FileReader","readAsText","onload","parse","input","value","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport Cookies from 'universal-cookie';\nimport {\n  Redirect\n} from 'react-router-dom';\n\nfunction Create ({ changeAlert, forceLogout }) {\n  const cookies = new Cookies();\n  const [redirect, setRedirect] = React.useState('');\n  const [choice, setChoice] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [upload, setUpload] = React.useState(null);\n\n  const createGame = () => {\n    let valid = true;\n    if (choice) {\n      if (upload === null) {\n        valid = false;\n        changeAlert('danger', 'Please choose a file');\n      } else if (!upload.name) {\n        valid = false;\n        changeAlert('danger', 'The file must have \\'name\\' field');\n        console.log(typeof upload);\n      } else if (upload.questions) {\n        if (!Array.isArray(upload.questions)) {\n          valid = false;\n          changeAlert('danger', 'The \\'questions\\' field must be a list of questions');\n        } else {\n          upload.questions.forEach((q) => {\n            if (!q.description || !q.time || !q.point || !q.choices || !q.answers) {\n              valid = false;\n              changeAlert('danger', 'Each question must have \\'description\\', \\'time\\', \\'point\\', \\'choices\\' and \\'answers\\'');\n            } else if ((typeof q.time) !== 'number' || (typeof q.point) !== 'number') {\n              valid = false;\n              changeAlert('danger', 'The \\'time\\' and \\'point\\' fields must be a number');\n            } else if (!Array.isArray(q.choices) || !Array.isArray(q.answers)) {\n              valid = false;\n              changeAlert('danger', 'The \\'choices\\' and \\'answers\\' fields must be a list');\n            } else if (q.choices.length < 2 || q.choices.length > 6) {\n              valid = false;\n              changeAlert('danger', 'Each question must have 2-6 choices');\n            } else {\n              const ids = [];\n              q.choices.forEach((c) => {\n                if (!c.id || !c.choice) {\n                  valid = false;\n                  changeAlert('danger', 'Each choice must have \\'id\\' and \\'choice\\'');\n                } else if (c.id) {\n                  if (ids.includes(c.id)) {\n                    valid = false;\n                    changeAlert('danger', 'Each choice in a question must have a unique \\'id\\'');\n                  } else {\n                    ids.push(c.id);\n                  }\n                }\n              });\n              q.answers.forEach((a) => {\n                if (!ids.includes(a)) {\n                  valid = false;\n                  changeAlert('danger', 'Each answer in a question must be the choice \\'id\\'');\n                }\n              });\n            }\n          });\n        }\n      }\n    } else if (name === '') {\n      valid = false;\n      changeAlert('danger', 'Please provide a name');\n    }\n\n    if (valid) {\n      fetch('http://localhost:5005/admin/quiz/new', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + cookies.get('token')\n        },\n        body: JSON.stringify({\n          name: choice ? upload.name : name\n        })\n      }).then(data => {\n        if (data.status === 200) {\n          if (choice) {\n            data.json().then((result) => {\n              fetch('http://localhost:5005/admin/quiz/' + result.quizId, {\n                method: 'PUT',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                  Authorization: 'Bearer ' + cookies.get('token')\n                },\n                body: JSON.stringify({\n                  questions: upload.questions.map((q) => {\n                    return {\n                      id: q.id,\n                      description: q.description,\n                      time: q.time,\n                      point: q.point,\n                      src: q.src ? q.src : null,\n                      choices: q.choices.map((c) => {\n                        return {\n                          id: c.id,\n                          choice: c.choice\n                        };\n                      }),\n                      answers: q.answers\n                    };\n                  }),\n                  name: upload.name,\n                  thumbnail: upload.thumbnail ? upload.thumbnail : null\n                })\n              }).then(data => {\n                if (data.status === 200) {\n                  changeAlert('success', 'You have created \"' + name + '\"');\n                  setRedirect('/dashboard');\n                } else if (data.status === 403) {\n                  forceLogout();\n                  setRedirect('/login');\n                } else {\n                  data.json().then((result) => {\n                    changeAlert('danger', result.error);\n                  });\n                }\n              });\n            });\n          } else {\n            changeAlert('success', 'You have created \"' + name + '\"');\n            setRedirect('/dashboard');\n          }\n        } else if (data.status === 403) {\n          forceLogout();\n          setRedirect('/login');\n        } else {\n          data.json().then((result) => {\n            changeAlert('danger', result.error);\n          });\n        }\n      });\n    }\n  };\n  const readUpload = (e) => {\n    if (e.target.files[0]) {\n      const reader = new FileReader();\n      reader.readAsText(e.target.files[0], 'UTF-8');\n      reader.onload = (e) => {\n        setUpload(JSON.parse(e.target.result));\n      };\n    } else {\n      setUpload(null);\n    }\n  };\n\n  let input = null;\n  if (choice) {\n    input = (\n      <>\n        <div>\n          <input\n            type='file'\n            accept='application/json'\n            onChange={readUpload}\n          ></input>\n        </div>\n      </>\n    );\n  } else {\n    input = (\n      <>\n        <div>\n          <label>Name: </label>\n          <input\n            type='text'\n            onChange={(e) => { setName(e.target.value); }}\n          ></input>\n        </div>\n      </>\n    );\n  }\n\n  if (redirect === '') {\n    return (\n      <>\n        <h1>Add game</h1>\n        <div>\n          <input\n            id='createGame'\n            name='choice'\n            type='radio'\n            onChange={() => { setChoice(false); }}\n            checked={!choice}\n          ></input>\n          <label\n            htmlFor='createGame'\n          >Create new game</label>\n        </div>\n        <div>\n          <input\n            id='uploadGame'\n            name='choice'\n            type='radio'\n            onChange={() => { setChoice(true); }}\n            checked={choice}\n          ></input>\n          <label\n            htmlFor='uploadGame'\n          >Upload game data (JSON)</label>\n        </div>\n        {input}\n        <button\n          className='btn btn-primary'\n          onClick={createGame}\n        >\n          Create\n        </button>\n      </>\n    );\n  } else {\n    return (\n      <Redirect push to={redirect} />\n    );\n  }\n}\n\nCreate.propTypes = {\n  changeAlert: propTypes.func,\n  forceLogout: propTypes.func\n};\n\nexport default Create;\n"]},"metadata":{},"sourceType":"module"}