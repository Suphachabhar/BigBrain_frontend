{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/suphachabharnigrodhananda/Desktop/6080/ass3/frontend/src/elements/editGameBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Cookies from 'universal-cookie';\n\nfunction Edit({\n  quiz\n}) {\n  _s();\n\n  const cookies = new Cookies();\n  const [questions, setQuestions] = React.useState(quiz.questions);\n\n  const getInfo = () => {\n    fetch('http://localhost:5005/admin/quiz/', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + cookies.get('token')\n      }\n    }).then(data => {\n      if (data.status === 200) {\n        fetch('http://localhost:5005/admin/quiz/' + quiz.id, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + cookies.get('token')\n          }\n        }).then(data => {\n          data.json().then(result => {\n            setQuestions(result.questions).map(question => {\n              return /*#__PURE__*/_jsxDEV(\"p\", {\n                children: question.description\n              }, question.description, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 22\n              }, this);\n            });\n          });\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [questions, \" \", getInfo]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Edit, \"4DBYoZYsHhCfxPCojTrkqhuURE0=\");\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/Users/suphachabharnigrodhananda/Desktop/6080/ass3/frontend/src/elements/editGameBoard.jsx"],"names":["React","Cookies","Edit","quiz","cookies","questions","setQuestions","useState","getInfo","fetch","method","headers","Accept","Authorization","get","then","data","status","id","json","result","map","question","description"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,SAASC,IAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAyB;AAAA;;AACvB,QAAMC,OAAO,GAAG,IAAIH,OAAJ,EAAhB;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BN,KAAK,CAACO,QAAN,CAAeJ,IAAI,CAACE,SAApB,CAAlC;;AAEA,QAAMG,OAAO,GAAG,MAAM;AACpBC,IAAAA,KAAK,CAAC,mCAAD,EAAsC;AACzCC,MAAAA,MAAM,EAAE,KADiC;AAEzCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB,kBAFT;AAGPC,QAAAA,aAAa,EAAE,YAAYT,OAAO,CAACU,GAAR,CAAY,OAAZ;AAHpB;AAFgC,KAAtC,CAAL,CAOGC,IAPH,CAOQC,IAAI,IAAI;AACd,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvBR,QAAAA,KAAK,CAAC,sCAAsCN,IAAI,CAACe,EAA5C,EAAgD;AACnDR,UAAAA,MAAM,EAAE,KAD2C;AAEnDC,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,kBADD;AAEP,4BAAgB,kBAFT;AAGPC,YAAAA,aAAa,EAAE,YAAYT,OAAO,CAACU,GAAR,CAAY,OAAZ;AAHpB;AAF0C,SAAhD,CAAL,CAOGC,IAPH,CAOQC,IAAI,IAAI;AACdA,UAAAA,IAAI,CAACG,IAAL,GAAYJ,IAAZ,CAAkBK,MAAD,IAAY;AAC3Bd,YAAAA,YAAY,CAACc,MAAM,CAACf,SAAR,CAAZ,CAA+BgB,GAA/B,CAAmCC,QAAQ,IAAI;AAC7C,kCAAO;AAAA,0BAA+BA,QAAQ,CAACC;AAAxC,iBAAQD,QAAQ,CAACC,WAAjB;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,aAFD;AAGD,WAJD;AAKD,SAbD;AAcD;AACF,KAxBD;AAyBD,GA1BD;;AA4BA,sBACE;AAAA,eAAIlB,SAAJ,OAAgBG,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAnCQN,I;;KAAAA,I;AAqCT,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport Cookies from 'universal-cookie';\n\nfunction Edit ({ quiz }) {\n  const cookies = new Cookies();\n  const [questions, setQuestions] = React.useState(quiz.questions);\n\n  const getInfo = () => {\n    fetch('http://localhost:5005/admin/quiz/', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + cookies.get('token')\n      }\n    }).then(data => {\n      if (data.status === 200) {\n        fetch('http://localhost:5005/admin/quiz/' + quiz.id, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + cookies.get('token')\n          }\n        }).then(data => {\n          data.json().then((result) => {\n            setQuestions(result.questions).map(question => {\n              return <p key={question.description}>{question.description}</p>;\n            })\n          })\n        })\n      }\n    })\n  }\n\n  return (\n    <p>{questions} {getInfo}</p>\n  );\n}\n\nexport default Edit;\n"]},"metadata":{},"sourceType":"module"}